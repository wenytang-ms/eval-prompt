name: evaluation
on:
  workflow_dispatch:
    

jobs:
  evaluation:
    runs-on: windows-latest
    environment: eng
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10' 
      - name: Install poetry
        uses: abatilo/actions-poetry@v2

      - name: Install the project dependencies
        run: poetry install
      
      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: download api spec files
        env:
          AZURE_STORAGE_ACCOUNT_URL: ${{ secrets.AZURE_STORAGE_ACCOUNT_URL }}
          AZURE_STORAGE_CONTAINER_NAME: ${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}
        run: |
          poetry run python prompteval/downloadSpecFiles.py

      - name: generate yml
        env:
          AZURE_OPENAI_API_VERSION: ${{ secrets.AZURE_OPENAI_API_VERSION }}
          AZURE_OPENAI_DEPLOYMENT: ${{ secrets.AZURE_OPENAI_DEPLOYMENT }}
          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
          RBAC: ${{ secrets.RBAC }}
        run: |
          poetry run python prompteval/prompteval.py

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: install spectral
        run: npm install -g @stoplight/spectral-cli

      - name: run evaluate
        run: |
          poetry run python prompteval/evaluate.py

      - uses: actions/upload-artifact@v4
        with:
          name: results
          path: |
            results/

      - name: Read JSONL file and show warning or error
        run: |
          Get-Content ./results/output.jsonl | ForEach-Object {
            $json = $_ | ConvertFrom-Json
            if ($json.severity -eq 1) {
              Write-Output "::warning::$($json.code, $json.message)"
            } elseif ($json.severity -eq 0) {
              Write-Output "::error::$($json.code, $json.message)"
            }
          }
        shell: pwsh