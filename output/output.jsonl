{"response": "openapi: 3.0.1\ninfo:\n  title: Weather Forecast API\n  description: A simple API to retrieve weather forecasts.\n  version: 1.0.0\nservers:\n  - url: http://localhost:5000\n    description: Local development server\npaths:\n  /WeatherForecast:\n    get:\n      summary: Get Weather Forecast\n      description: Retrieve a list of weather forecasts for the next 5 days.\n      operationId: GetWeatherForecast\n      tags:\n        - Weather\n      responses:\n        \"200\":\n          description: A list of weather forecasts.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/WeatherForecast'\ncomponents:\n  schemas:\n    WeatherForecast:\n      type: object\n      properties:\n        date:\n          type: string\n          format: date\n          description: The date of the forecast.\n        temperatureC:\n          type: integer\n          description: The temperature in Celsius.\n        summary:\n          type: string\n          description: A brief description of the weather.\n      required:\n        - date\n        - temperatureC\n        - summary\n```\n\nThis OpenAPI specification details the endpoint `/WeatherForecast` with a `GET` method to retrieve weather forecasts, along with the structure of the `WeatherForecast` model. You can use this in tools like Swagger UI or Postman to visualize and test the API.", "query": "Please be professional, and use below infomation to generate an OpenAPI specification documentation with YAML format:", "context": "[ApiController]\n[Route(\"[controller]\")]\npublic class WeatherForecastController : ControllerBase\n{\n    private static readonly string[] Summaries = new[]\n    {\n        \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\"\n    };\n\n    private readonly ILogger<WeatherForecastController> _logger;\n\n    public WeatherForecastController(ILogger<WeatherForecastController> logger)\n    {\n        _logger = logger;\n    }\n\n    [HttpGet(Name = \"GetWeatherForecast\")]\n    public IEnumerable<WeatherForecast> Get()\n    {\n        return Enumerable.Range(1, 5).Select(index => new WeatherForecast\n        {\n            Date = DateOnly.FromDateTime(DateTime.Now.AddDays(index)),\n            TemperatureC = Random.Shared.Next(-20, 55),\n            Summary = Summaries[Random.Shared.Next(Summaries.Length)]\n        })\n        .ToArray();\n    }\n}\n", "ground_truth": "openapi: 3.0.0\ninfo:\n  title: Weather Forecast API\n  version: '1.0.0'\nservers:\n  - url: 'http://localhost:5000'\npaths:\n  /WeatherForecast:\n    get:\n      summary: Get weather forecast\n      operationId: GetWeatherForecast\n      responses:\n        '200':\n          description: Successfully retrieved weather forecast\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/WeatherForecast'\ncomponents:\n  schemas:\n    WeatherForecast:\n      type: object\n      properties:\n        date:\n          type: string\n          format: date\n          description: Date of the forecast\n        temperatureC:\n          type: integer\n          description: Temperature in Celsius\n        summary:\n          type: string\n          description: Weather summary\n      required:\n        - date\n        - temperatureC\n        - summary"}
{"response": "openapi: 3.0.0\ninfo:\n  title: Pet Management API\n  description: An API for managing pets, allowing users to perform CRUD operations on pet records.\n  version: \"1.0.0\"\nservers:\n  - url: http://localhost:3000\n    description: Local server\npaths:\n  /api/pets:\n    get:\n      summary: Get all pets\n      description: Retrieve a list of all pets.\n      responses:\n        '200':\n          description: A list of pets.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n    post:\n      summary: Create a new pet\n      description: Add a new pet to the list.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PetInput'\n      responses:\n        '200':\n          description: The created pet.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n  /api/pets/{id}:\n    get:\n      summary: Get a pet by ID\n      description: Retrieve a single pet by its ID.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: ID of the pet to retrieve.\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: The requested pet.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        '404':\n          description: Pet not found.\n    put:\n      summary: Update a pet by ID\n      description: Update the details of a pet by its ID.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: ID of the pet to update.\n          schema:\n            type: integer\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PetInput'\n      responses:\n        '200':\n          description: The updated pet.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        '404':\n          description: Pet not found.\n    delete:\n      summary: Delete a pet by ID\n      description: Remove a pet by its ID.\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: ID of the pet to delete.\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: The deleted pet.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        '404':\n          description: Pet not found.\ncomponents:\n  schemas:\n    Pet:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: The unique ID of the pet.\n        name:\n          type: string\n          description: The name of the pet.\n        type:\n          type: string\n          description: The type of the pet (e.g., Dog, Cat).\n      required:\n        - id\n        - name\n        - type\n    PetInput:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The name of the pet.\n        type:\n          type: string\n          description: The type of the pet (e.g., Dog, Cat).\n      required:\n        - name\n        - type\n```", "query": "Please be professional, and use below infomation to generate an OpenAPI specification documentation with YAML format:", "context": "const express = require('express');\nconst app = express();\napp.use(express.json());\n\nlet pets = [\n  { id: 1, name: 'Max', type: 'Dog' },\n  { id: 2, name: 'Lucy', type: 'Cat' },\n  // Add more pets as needed\n];\napp.get('/api/pets', (req, res) => {\n  res.send(pets);\n});\napp.get('/api/pets/:id', (req, res) => {\n  const pet = pets.find(p => p.id === parseInt(req.params.id));\n  if (!pet) return res.status(404).send('The pet with the given ID was not found.');\n  res.send(pet);\n});\napp.post('/api/pets', (req, res) => {\n  const pet = {\n    id: pets.length + 1,\n    name: req.body.name,\n    type: req.body.type\n  };\n  pets.push(pet);\n  res.send(pet);\n});\napp.put('/api/pets/:id', (req, res) => {\n  const pet = pets.find(p => p.id === parseInt(req.params.id));\n  if (!pet) return res.status(404).send('The pet with the given ID was not found.');\n\n  pet.name = req.body.name;\n  pet.type = req.body.type;\n\n  res.send(pet);\n});\napp.delete('/api/pets/:id', (req, res) => {\n  const pet = pets.find(p => p.id === parseInt(req.params.id));\n  if (!pet) return res.status(404).send('The pet with the given ID was not found.');\n\n  const index = pets.indexOf(pet);\n  pets.splice(index, 1);\n\n  res.send(pet);\n});\nconst port = process.env.PORT || 3000;\napp.listen(port, () => console.log(`Listening on port ${port}...`));", "ground_truth": "openapi: 3.0.0\ninfo:\n  title: Pets API\n  version: '1.0.0'\nservers:\n  - url: 'http://localhost:3000'\npaths:\n  /api/pets:\n    get:\n      summary: Get all pets\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n    post:\n      summary: Create a new pet\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet'\n      responses:\n        '200':\n          description: Pet created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n  /api/pets/{id}:\n    get:\n      summary: Get pet by ID\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        '404':\n          description: Pet not found\n    put:\n      summary: Update pet by ID\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet'\n      responses:\n        '200':\n          description: Pet updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        '404':\n          description: Pet not found\n    delete:\n      summary: Delete pet by ID\n      parameters:\n        - in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Pet deleted\n        '404':\n          description: Pet not found\ncomponents:\n  schemas:\n    Pet:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        type:\n          type: string\n      required:\n        - name\n        - type"}
{"response": "openapi: 3.0.0\ninfo:\n  title: Flask RESTful API\n  description: A simple RESTful API built using Flask and Flask-RESTful.\n  version: 1.0.0\nservers:\n  - url: http://localhost:5000\n    description: Local development server\npaths:\n  /:\n    get:\n      summary: Get a greeting message\n      description: Returns a simple \"hello world\" message.\n      responses:\n        '200':\n          description: A JSON object containing the greeting message.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: hello world\n    post:\n      summary: Post data to the server\n      description: Accepts JSON data and returns it back in the response.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: true\n      responses:\n        '201':\n          description: A JSON object containing the posted data.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: object\n                    additionalProperties: true\n  /square/{num}:\n    get:\n      summary: Get the square of a number\n      description: Returns the square of the provided integer.\n      parameters:\n        - name: num\n          in: path\n          required: true\n          description: The integer to be squared.\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: A JSON object containing the square of the number.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  square:\n                    type: integer\n                    example: 16\n```", "query": "Please be professional, and use below infomation to generate an OpenAPI specification documentation with YAML format:", "context": "from flask import Flask, jsonify, request \nfrom flask_restful import Resource, Api \napp = Flask(__name__) \napi = Api(app)  \nclass Hello(Resource): \n    def get(self): \n        return jsonify({'message': 'hello world'}) \n    def post(self): \n        data = request.get_json()\n        return jsonify({'data': data}), 201\nclass Square(Resource): \n    def get(self, num): \n        return jsonify({'square': num**2})\napi.add_resource(Hello, '/') \napi.add_resource(Square, '/square/<int:num>') \nif __name__ == '__main__': \n  \n    app.run(debug = True) ", "ground_truth": "openapi: 3.0.0\ninfo:\n  title: API Specification\n  version: '1.0.0'\nservers:\n  - url: 'http://localhost:5000'\npaths:\n  '/':\n    get:\n      summary: Return greeting message\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    example: 'hello world'\n    post:\n      summary: Receive and return submitted data\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n      responses:\n        '201':\n          description: Data received\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: object\n  '/square/{num}':\n    get:\n      summary: Return the square of the specified number\n      parameters:\n        - in: path\n          name: num\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  square:\n                    type: integer"}
